// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestTaskAngelaMershalova;

#nullable disable

namespace TestTaskAngelaMershalova.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221109195359_nullable_acount_incedent_id")]
    partial class nullable_acount_incedent_id
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TestTaskAngelaMershalova.Models.AccountEntity.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("IncedentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IncedentId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Accounts", "TestTask");
                });

            modelBuilder.Entity("TestTaskAngelaMershalova.Models.ContactEntity.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Contacts", "TestTask");
                });

            modelBuilder.Entity("TestTaskAngelaMershalova.Models.IncedentEntity.Incedent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("Incedents", "TestTask");
                });

            modelBuilder.Entity("TestTaskAngelaMershalova.Models.AccountEntity.Account", b =>
                {
                    b.HasOne("TestTaskAngelaMershalova.Models.IncedentEntity.Incedent", "Incedent")
                        .WithMany("Accounts")
                        .HasForeignKey("IncedentId");

                    b.Navigation("Incedent");
                });

            modelBuilder.Entity("TestTaskAngelaMershalova.Models.ContactEntity.Contact", b =>
                {
                    b.HasOne("TestTaskAngelaMershalova.Models.AccountEntity.Account", "Account")
                        .WithMany("Contacts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("TestTaskAngelaMershalova.Models.AccountEntity.Account", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("TestTaskAngelaMershalova.Models.IncedentEntity.Incedent", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
